{"version":3,"sources":["../src/providers/theme-provider.tsx","../src/bindings.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["import React from 'react';\nimport { PaperProvider, MD3LightTheme, MD3DarkTheme } from 'react-native-paper';\nimport { useColorScheme } from 'react-native';\n\n// Healthcare-focused theme colors\nconst himsLightTheme = {\n  ...MD3LightTheme,\n  colors: {\n    ...MD3LightTheme.colors,\n    primary: '#0066cc',\n    primaryContainer: '#e6f2ff',\n    onPrimary: '#ffffff',\n    onPrimaryContainer: '#001429',\n    secondary: '#4caf50',\n    secondaryContainer: '#e8f5e8',\n    onSecondary: '#ffffff',\n    onSecondaryContainer: '#1b5e20',\n    error: '#f44336',\n    errorContainer: '#ffebee',\n    onError: '#ffffff',\n    onErrorContainer: '#b71c1c',\n    surface: '#ffffff',\n    onSurface: '#1c1b1f',\n    surfaceVariant: '#f5f5f5',\n    onSurfaceVariant: '#49454f',\n    outline: '#d1d5db',\n    background: '#fafafa',\n    onBackground: '#1c1b1f',\n  },\n};\n\nconst himsDarkTheme = {\n  ...MD3DarkTheme,\n  colors: {\n    ...MD3DarkTheme.colors,\n    primary: '#4da6ff',\n    primaryContainer: '#003d7a',\n    onPrimary: '#001429',\n    onPrimaryContainer: '#e6f2ff',\n    secondary: '#81c784',\n    secondaryContainer: '#2e7d32',\n    onSecondary: '#1b5e20',\n    onSecondaryContainer: '#e8f5e8',\n    error: '#ef5350',\n    errorContainer: '#d32f2f',\n    onError: '#b71c1c',\n    onErrorContainer: '#ffebee',\n    surface: '#1c1b1f',\n    onSurface: '#e6e1e5',\n    surfaceVariant: '#49454f',\n    onSurfaceVariant: '#cac4d0',\n    outline: '#938f99',\n    background: '#121212',\n    onBackground: '#e6e1e5',\n  },\n};\n\ninterface HimsPaperProviderProps {\n  children: React.ReactNode;\n  theme?: 'light' | 'dark' | 'auto';\n}\n\nexport function HimsPaperProvider({ children, theme = 'auto' }: HimsPaperProviderProps) {\n  const systemColorScheme = useColorScheme();\n  \n  const selectedTheme = theme === 'auto' \n    ? (systemColorScheme === 'dark' ? himsDarkTheme : himsLightTheme)\n    : theme === 'dark' \n    ? himsDarkTheme \n    : himsLightTheme;\n\n  return (\n    <PaperProvider theme={selectedTheme}>\n      {children}\n    </PaperProvider>\n  );\n}","import { NativeModules, Platform } from 'react-native';\n\nconst LINKING_ERROR =\n  `The package 'hims-core-sdk-react-native' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- Run 'cd ios && pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo Go\\n';\n\nconst HimsCoreSdk = NativeModules.HimsCoreSdk\n  ? NativeModules.HimsCoreSdk\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\nexport interface HimsConfig {\n  apiEndpoint: string;\n  authToken?: string;\n  enableLogging: boolean;\n}\n\nexport interface HimsCore {\n  initialize(): Promise<string>;\n}\n\nexport class HimsCoreSDK {\n  private core: HimsCore | null = null;\n\n  constructor(private config: HimsConfig) {}\n\n  async initialize(): Promise<string> {\n    if (!this.core) {\n      this.core = await HimsCoreSdk.createHimsCore(this.config);\n    }\n    return this.core!.initialize();\n  }\n\n  // FHIR Methods\n  async createPatient(patientData: any): Promise<any> {\n    return HimsCoreSdk.createPatient(patientData);\n  }\n\n  async getPatient(id: string): Promise<any> {\n    return HimsCoreSdk.getPatient(id);\n  }\n\n  // HL7v2 Methods\n  async parseHL7Message(message: string): Promise<any> {\n    return HimsCoreSdk.parseHL7Message(message);\n  }\n\n  // DICOM Methods\n  async parseDicomMetadata(file: string): Promise<any> {\n    return HimsCoreSdk.parseDicomMetadata(file);\n  }\n\n  // ABDM Methods\n  async initiateConsent(request: any): Promise<any> {\n    return HimsCoreSdk.initiateConsent(request);\n  }\n}\n\nexport default HimsCoreSDK;"]}